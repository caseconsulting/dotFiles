# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js':
  'console.log':
    'prefix': 'cl'
    'body': """
  console.log("$1", $1);$0
    """

  'console.log2':
    'prefix': 'c2'
    'body': """
  console.log("$1", $2);$0
    """

  'describe':
    'prefix': 'des'
    'body': """
    describe('$1', () => {
      $0
    }); // $1

    """

  'let':
    'prefix': 'let'
    'body': """
      let $1;
      beforeEach(() => $1 = '{$1}');

      $0
    """

  'let2':
    'prefix': 'let2'
    'body': """
      let $1, $2;
      beforeEach(() => $1 = '{$1}');
      beforeEach(() => $2 = '{$2}');

      $0
    """

  'let3':
    'prefix': 'let3'
    'body': """
      let $1, $2, $3;
      beforeEach(() => $1 = '{$1}');
      beforeEach(() => $2 = '{$2}');
      beforeEach(() => $3 = '{$3}');

      $0
    """

  'should':
    'prefix': 'should'
    'body': """
      it('should $1', () => {
        expect($2.$3($4)).toEqual($5);
      });
    """

  'spy':
    'prefix': 'spy'
    'body': """
      beforeEach(() => $1 = jasmine.createSpy('$1').and.returnValue($2));
      afterEach(() => expect($1).toHaveBeenCalledWith($3));
      $0
    """

  'when':
    'prefix': 'when'
    'body': """
    describe('when $1', () => {
      beforeEach(() => spyOn($2,'$3').and.returnValue($4));
      afterEach(() => expect($2.$3).toHaveBeenCalledWith($5));

      $0
    });

    """

  'beforeEach':
    'prefix': 'bef'
    'body': """
    beforeEach(() => $1);
    """

  'afterEach':
    'prefix': 'aft'
    'body': """
    afterEach(() => $1);
    """

  'it':
    'prefix': 'it'
    'body': """
    it('should $1', () => {
      $2
    });
    """

  'test':
    'prefix': 'test'
    'body': """
/* globals $1 */
(function() {
  'use strict';

  describe('$1', () => {

    beforeEach(() => {
      bard.appModule('${2:CHANGE_ME}');
      bard.inject(this, '$1');
    });

    $0
  }); // $1

})();
"""

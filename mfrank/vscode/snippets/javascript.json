{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  //  "prefix": "log",
  //  "body": [
  //      "console.log('$1');",
  //      "$2"
  //  ],
  //  "description": "Log output to console"
  // }
  "console separator": {
    "prefix": "log*",
    "body": ["console.log('**************************************************************');"],
    "description": "Add a line of asterisks in the console"
  },
  "console.log": {
    "prefix": "cl",
    "body": ["console.log('$1', $1);$0"],
    "description": "adds a console.log statement"
  },
  "describe": {
    "prefix": "des",
    "body": ["describe('$1', () => {", "\t$0", "}); // $1"],
    "description": "Describe block"
  },
  "should": {
    "prefix": "should",
    "body": ["it('SHOULD $1', () => {", "\texpect($2.$3($4)).toEqual($5);", "});"],
    "description": "Sets up a it block with expectation toEqual"
  },
  "spy": {
    "prefix": "spy",
    "body": [
      "beforeEach(() => $1 = jasmine.createSpy('$1').and.returnValue($2));",
      "afterEach(() => expect($1).toHaveBeenCalledWith($3));",
      "$0"
    ],
    "description": "Sets up a before and after each block creating a spy and setting up return value"
  },
  "when": {
    "prefix": "when",
    "body": [
      "describe('WHEN $1', () => {",
      "\tbeforeEach(() => spyOn($2,'$3').and.returnValue($4));",
      "\tafterEach(() => expect($2.$3).toHaveBeenCalledWith($5));",
      "",
      "\t$0",
      "});",
      ""
    ]
  },
  "curryspy": {
    "prefix": "curryspy",
    "body": [
      "describe('WHEN $1', () => {",
      "\tlet $3;",
      "\tbeforeEach(() => $3 = jasmine.createSpy('$3').and.returnValue($6));",
      "\tafterEach(() => expect($3).toHaveBeenCalledWith($5));",
      "",
      "\tbeforeEach(() => spyOn($2,'$3').and.returnValue($3));",
      "\tafterEach(() => expect($2.$3).toHaveBeenCalledWith($4));",
      "",
      "\t$0",
      "});",
      ""
    ]
  },
  "beforeEach": {
    "prefix": "bef",
    "body": ["beforeEach(() => $1);"]
  },
  "afterEach": {
    "prefix": "aft",
    "body": ["afterEach(() => $1);"]
  },
  "it": {
    "prefix": "it",
    "body": ["it('SHOULD $1', () => {", "\t$2", "});"]
  },
  "test": {
    "prefix": "test",
    "body": [
      "/* globals $1 */",
      "(function() {",
      "\t'use strict';",
      "",
      "\tdescribe('$1', () => {",
      "",
      "\t\tbeforeEach(() => {",
      "\t\t\tbard.appModule('${2:SnippetsModuleName}');",
      "\t\t\tbard.inject(this, '$1');",
      "\t\t});",
      "",
      "\t\t$0",
      "\t}); // $1",
      "",
      "})();"
    ]
  },
  "let1": {
    "prefix": "let1",
    "body": ["let $1;", "", "beforeEach(() => {", "\t$1 = '{$1}';", "});$2"]
  },
  "let2": {
    "prefix": "let2",
    "body": ["let $1, $2;", "", "beforeEach(() => {", "\t$1 = '{$1}';", "\t$2 = '{$2}';", "});$3"]
  },
  "let3": {
    "prefix": "let3",
    "body": ["let $1, $2, $3;", "", "beforeEach(() => {", "\t$1 = '{$1}';", "\t$2 = '{$2}';", "\t$3 = '{$3}';", "});$4"]
  },
  "let4": {
    "prefix": "let4",
    "body": [
      "let $1, $2, $3, $4;",
      "",
      "beforeEach(() => {",
      "\t$1 = '{$1}';",
      "\t$2 = '{$2}';",
      "\t$3 = '{$3}';",
      "\t$4 = '{$4}';",
      "});$5"
    ]
  },
  "spec": {
    "prefix": "it",
    "body": ["it('SHOULD $1', () => {", "\t$2", "});"]
  }
}
